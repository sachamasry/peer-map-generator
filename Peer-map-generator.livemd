<!-- livebook:{"app_settings":{"output_type":"rich","slug":"peer-map-generator","zero_downtime":true},"autosave_interval_s":60,"file_entries":[{"name":"Peer_Map_template_spreadsheet.xlsx","type":"attachment"}],"persist_outputs":true} -->

# Generate Peer Map from Spreadsheet

```elixir
Mix.install([
  {:kino, "~> 0.11.2"},
  {:faker, "~> 0.17.0"},
  {:kino_vega_lite, "~> 0.1.10"},
  {:xlsx_reader, "~> 0.7.0"}
])
```

## Synopsis

This small application reads an Excel (`.xlsx`-formatted) spreadsheet, generating a [Mermaid](https://mermaid.js.org/) diagram. The diagram is displayed in the app as a visual verification tool, providing a way to ensure that all the data is present and correct in the input spreadsheet. Entities and relationships are automatically laid out by Mermaid algorithms, taking the tedium out of creating a diagram from the ground up. However—regardless of the cleverness of the software—the results are often not presentable to contextual safeguarding practitioners, as the information is not organised in a way to help _humans_ deduce meaning from the information.

In addition to the diagram, the program displays the generated Mermaid diagram definition. This can be imported into any tool that understands Mermaid flowchart definitions, such as [Draw.io](https://www.drawio.com/). In Draw.io, the diagram can be manually laid out in a way to better communicate the information to practitioners, following the organisation's visual language standards and their in-house style guides. This is where Draw.io really shines, as you can graphically manipulate all flowchart elements and their relationships, laying out, grouping and styling it in an aesthetically-pleasing and presentable way.

## Background and motivation

The drive for this solution came from the need to easily create and present _peer maps_, visual diagrams presenting groups of teenagers, their relationships and interactions, helping to identify individuals at risk, and formulate a strategy to help them.

Despite information existing in various records—databases, spreadsheets, and other documents—it is difficult to spot deep patterns in raw data. Humans are excellent at manipulating objects and making new inferences from visual data, which is why peer mapping is used as a tool to help identify where help is needed. Flowcharting and diagramming software exists to provide a common visual language to manipulate, then share information.

<!-- livebook:{"break_markdown":true} -->

### Why not build a diagram manually?

While it is easy to build a flowchart in any diagramming software program—including Draw.io—the work needed to create the flowchart with all the data needed is extremely tedious and quite error-prone. For example, a medium-complexity diagram involving only a dozen people, a few locations, each with one relationship or interaction, and several _groupings_, will demand much copying (and pasting):

<!-- livebook:{"break_markdown":true} -->

* $12\times2=24$ facts for entities: twelve people or places, two facts per entity, e.g. name and age
* $3\times3=9$ facts for groupings: incidents, places (street, estates, schools), gangs or affiliations, with three facts per group, e.g. title, comments, objects belonging to groups
* $16\times2=32$ facts for relationships and incidents: how people are related to each other, with comments, who was involved in incidents with description, date and place

<!-- livebook:{"break_markdown":true} -->

This example showss that a diagram built by hand needs 65 facts copied from some source data, then pasted into the diagram, needing at least 130 interactions (once to copyŵand the second time to paste), ignoring context-switching, searching and other tasks. All of this is needed just to _place_ the information on the canvas, _before_ it is rearranged and styled for presentation, a process which can easily take half an hour as it is reasonable to expect at most two copy and paste operations in a minute. The result is one single diagram, when several may be required. Clearly, the cost of doing this manually is rather high and should be automated, where possible.

<!-- livebook:{"break_markdown":true} -->

By co-locating all the relevant data into a spreadsheet, using automation to build up a _base_ diagram, much tedium can be avoided. It is important to note that this information already exists in spreadsheets, so that preparing the data according to a template shouldn't take very much time. Once it is ready, this Livebook can read and convert the data into a structured form to help construct a diagram. This diagram is a starting point, with all the facts already inserted, ready and waiting to be styled.

## The process

This Livebook acts as a simple web application, used to select the input spreadsheet and generate the data needed for a flowchart. When run, it presents a minimalist user interface, asking only for the input spreadsheet's location, generating a diagram from the data.

<!-- livebook:{"break_markdown":true} -->

The process begins with the creation of a complying spreadsheet, which is opened, read, and parsed inside this Livebook, presenting the resultant Mermaid diagram for inspection. One of the principal benefits of Mermaid diagrams is delegating layout decisions to the software. Mermaid can produce a good layout with a simple diagram, especially one with few relationships, but is unsuitable for any large or complex data sets. For this reason, the automatically-generated diagram is nothing more than a way to check that all information has been read and included correctly. If anything is seen to be wrong at this stage, corrections need to be made in the spreadsheet, and the process repeated until the diagram shows all desired data. One benefit of this step is that no time is wasted on constant layout or stylistic changes, only on the correctness of the data.

The flowchart below shows the steps in the process.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Kino.Mermaid.new("""
%%{ init: { 'flowchart': { 'curve': 'cardinal' } } }%%
flowchart TD
  A[\\Prepare spreadsheet/]:::manual
  INPUT[/Open spreadsheet in Livebook app/]:::input
  B[Run this Livebook]:::step
  OUTPUT[\\Diagram is generated & diagram definition displayed\\]:::output
  DIACHECK{Is all data <br />present in the diagram <br />and correct?}:::decision
  C[Copy generated <br />diagram code]:::step
  D[Import into Draw.io]:::step
  E[\\Lay out and style diagram for <br />presentation purposes/]:::manual
  
  A-->INPUT
  INPUT-->B
  B-->OUTPUT
  OUTPUT--Check <br />generated diagram-->DIACHECK
  DIACHECK--Yes-->C
  DIACHECK-.No.->A
  C-->D
  D-->E

  classDef manual fill:#88c0d066,stroke:#88c0d0,color:#2e3440
  classDef input fill:#5e81ac99,stroke:#5e81ac,color:#ffffff
  classDef decision fill:#d0877055,stroke:#d08770,color:#3b4252
  classDef output fill:#b48eadaa,stroke:#b48ead,color:#ffffff
  classDef step fill:#81a1c155,stroke:#b48ead,color:#2e3440

  linkStyle 0,1,2,3,4,6,7 stroke:#b48ead,stroke-width: 3px
  linkStyle 5 stroke:#bf616a,stroke-width:4px,color:#bf616a
""")
```

<!-- livebook:{"output":true} -->

```mermaid
%%{ init: { 'flowchart': { 'curve': 'cardinal' } } }%%
flowchart TD
  A[\Prepare spreadsheet/]:::manual
  INPUT[/Open spreadsheet in Livebook app/]:::input
  B[Run this Livebook]:::step
  OUTPUT[\Diagram is generated & diagram definition displayed\]:::output
  DIACHECK{Is all data <br />present in the diagram <br />and correct?}:::decision
  C[Copy generated <br />diagram code]:::step
  D[Import into Draw.io]:::step
  E[\Lay out and style diagram for <br />presentation purposes/]:::manual
  
  A-->INPUT
  INPUT-->B
  B-->OUTPUT
  OUTPUT--Check <br />generated diagram-->DIACHECK
  DIACHECK--Yes-->C
  DIACHECK-.No.->A
  C-->D
  D-->E

  classDef manual fill:#88c0d066,stroke:#88c0d0,color:#2e3440
  classDef input fill:#5e81ac99,stroke:#5e81ac,color:#ffffff
  classDef decision fill:#d0877055,stroke:#d08770,color:#3b4252
  classDef output fill:#b48eadaa,stroke:#b48ead,color:#ffffff
  classDef step fill:#81a1c155,stroke:#b48ead,color:#2e3440

  linkStyle 0,1,2,3,4,6,7 stroke:#b48ead,stroke-width: 3px
  linkStyle 5 stroke:#bf616a,stroke-width:4px,color:#bf616a

```

Once the diagram shows all the expected data, copy the diagram-defining code displayed underneath, and import that into a blank diagram in Draw.io: click on the 'Insert' button in the menu bar (`+` icon) `>` select `Advanced` `>` select the `Mermaid` option. Delete any text in the text box, paste the copied diagram definition and click `Insert`. You will see a newly created diagram on the canvas.

Now that all the data has been converted into a diagram, all that remains to be done is to create a layout adhering to the accepted in-house style, where all the people and relationships have been placed in a way that presents information in a grouped way. This is a subjective process, the _best_ layour will stimulate discussion and pattern-recognition, to help all involved in drawing impactful conclusions from the data.

<!-- livebook:{"break_markdown":true} -->

The reasoning that led to the design of this process was to get the best of both worlds: a first phase leaving layout decisions to the software until all the information was provably correct and complete, followed by the flexibility needed for presenting the case at hand. In this manner, no time is misspent on tedious copying and pasting in the initial stages, or on endlessly tinkering with layout, followed by unconstrained felxibility in the construction of a useful layout without concern for data inaccuracies, as this has already been approved at a previous step.

<!-- livebook:{"break_markdown":true} -->

### Going further

Draw.io is free and open-source software, and is very powerful, making it possible to create powerful diagrams. Even though it is widely used, often it is only the more well-known commercial competitors that are available at an institution, with which practitioners have more experience and training.

Some popular commercial diagramming programs are able to import Draw.io files (`.drawio` extension), and these can be a good substitute for Draw.io in the steps above. [Lucidchart](https://lucidchart.com) is one example of excellent, widely-used commercial diagramming software. Following the above step of importing the Mermaid chart into Draw.io, save the diagram to a Draw.io file, then import that `.drawio` file into Lucidchart, to do the layout and final styling of the diagram in Lucidchart exclusively. This is a good workflow, as Lucidchart has an excellent user interface, many shape libraries to communicate with, it is very slick to use, providing many styling options for attractive diagrams.

## Reading from an Excel spreadsheet

Spreadsheets are a commonly-used tool, and are the simplest way for practitioners to enter data in preparation for peer mapping, as well as an easy and structured data source for our program to read from. Within the spreadsheet, _worksheets_ act as two-dimensional tables, storing records of people, their relationships and interactions to be mapped.

<!-- livebook:{"break_markdown":true} -->

### Spreadsheet specification

The spreadsheet has _People_ worksheet, designed to hold names of the teenagers involved—_whom_ we are including in the peer map. The next worksheet is called _Groupings_, defining any groups we want the people to be defined in, e.g. family units, gangs, locations, connected with some incident, etc. Finally, there is the _Relationships_ worksheet, defining both relationships between the adolescents, as well as connecting them in incidents known to the safeguarding practitioners. A template spreadsheet is linked to this Livebook, serving as the starting point for new peer mapping exercises.

<!-- livebook:{"break_markdown":true} -->

There are three specifications which must be met by the spreadsheet. The _People_ worksheet is expected to contain the following columns:

1. `Reference` as the first column, serving as a unique identifier for each child
2. `First name` and `Surname` (or `Last name`) as second and third columns; the column heading is not important
3. `Contained by` as the fourth column, listing all the groupings in which this child will be presented in, separated by the vertical bar (`|`) symbol
4. The child's date of birth, formatted as a proper date, as a fifth column

**NOTE** Column headings are not important, as the worksheed is read and parsed based on column position. Consequently, any number of columns may be included _after_ those specified here, providing the practitionre additional information.

<!-- livebook:{"break_markdown":true} -->

The _Groupings_ worksheet exists to name any kind of grouping we need to place the child in: siblings, family units, gangs, affiliations, grouped by a common incident, etc. This is merely a visual aid in building the peer map. Additionally, if further clarity is needed, groups can be nested inside other groups, e.g. a gang existing within a particular area, or other delineation.

1. `Reference` the first column must contain some kind of unique identifier not repeated elsewhere
2. `Title` as the second column, naming this group
3. `Contained by` as the third column, specifying that this group belongs within another group. If used, this needs to be the unique identifier, or reference, of the parent group.

<!-- livebook:{"break_markdown":true} -->

Finally, the _Relationships_ worsheet is where relationships between the children need to be defined. This is also where incidents are recorded. By design, the relationships are directional, presenting a relationship _from_ a person, _to_ a person. If no direction is intended, this can be handled by removing the arrow from the relationship connecting the two children. Also, the style of the connecting line can be chosen here, as different styles communicate specific meanings, e.g. thick line for strong relationship, dashed or line indicating a conflicted relationship.

Five columns are needed here:

1. `Relationship source` indicating _from whom_ does the relationship stem. A unique identifier is needed here, designating either a child or a grouping
2. `Relationship destination` indicating _to whom_ the relationship points. A unique identifier is needed here, designating either a child or a grouping
3. `Source arrow` chooses the type of arrow (if any), including the style of the connection line.
4. `Destination arrow` chooses the type of arrow (if any), including the style of the connection line.
5. `Relationship description` is the text to be displayed for that relationship or interaction

<!-- livebook:{"break_markdown":true} -->

### Read the spreadsheet

Below, we use the `XlsxReader` library, creating a module (`Graphing.Spreadheet`) to handle opening the selected input file (`open_spreadsheet_file/1`). Once open, `read_all_worksheets` will read the data in all the worksheets in the spreadheet, ignoring empty rows, as well as some other data which is not valid.

The last function, `get_payload/2` can be used for checking data imported from worksheets, providing the full data payload and desired worksheet.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.Spreadsheet do
  def open_spreadsheet_file(file_location) do
    {:ok, package} =
      XlsxReader.open(file_location, supported_custom_formats: [{}])

    package
  end

  def read_all_worksheets(xlsx_data_payload) do
    {:ok, data} =
      XlsxReader.sheets(xlsx_data_payload,
        except: "Configuration",
        skip_row?: fn [column | _] -> column == :expect_chars or column == "" end,
        empty_rows: false,
        blank_value: "",
        number_type: Integer
      )

    data
  end

  def get_payload(data_payload, worksheet) do
    [
      {"People", [_people_headers | people_list]},
      {"Groupings", [_grouping_headers | groupings_list]},
      {"Relationships", [_relationship_headers | relationships_list]} | _
    ] = data_payload

    case worksheet do
      "People" -> people_list
      "Groupings" -> groupings_list
      "Relationships" -> relationships_list
      _ -> people_list
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.Spreadsheet, <<70, 79, 82, 49, 0, 0, 13, ...>>, {:get_payload, 2}}
```

## Define and read people

Reading from such a permissive data source, as spreadsheets are, presents a source of problems. Before anything is done with the data, we want to convert it into strict Elixir structures, essentially maps, but with predefined and required fields.

We define the _Person_ entity to have a unique identifier, hereafter called the `id`, a `name` holding the full person's name, and date of birth (`dob`). We also initialise a list of groupings (called a subgraph in Mermaid), to which the child may belong.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Person do
  defstruct id: 0, name: "", dob: "", belongs_to_subgraph: []
end
```

<!-- livebook:{"output":true} -->

```
{:module, Person, <<70, 79, 82, 49, 0, 0, 8, ...>>,
 %Person{id: 0, name: "", dob: "", belongs_to_subgraph: []}}
```

Reading the _People_ worksheet, we will rely on the `Graphing.People` module (defined below), to read and parse the children from the data. This is done with the `parse_people/1` function, which will return a list of people structures as defined previously.

The remainder of the functions in this module deals with parsing the zero or more—potentially nested—groupings to which the children may belong, which will be needed when generating the peer map.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.People do
  defp contained_by_to_list(contained_by_string) when is_bitstring(contained_by_string) do
    contained_by_string
    |> to_string()
    |> String.trim()
    |> String.split("|")
    |> Enum.filter(fn i -> i != "" end)
    |> Enum.map(fn i -> String.to_integer(i) end)
  end

  def parse_people(people_list) when is_list(people_list) do
    people_list
    |> Enum.map(fn [id, name, surname, contained_by, dob | _] ->
      %Person{
        id: String.to_integer(id),
        name: name <> " " <> surname,
        dob: dob,
        belongs_to_subgraph: contained_by_to_list(contained_by)
      }
    end)
  end

  def top_level_people(people_list) when is_list(people_list) do
    people_list
    |> Enum.filter(fn i ->
      Map.get(i, :belongs_to_subgraph) == []
    end)
  end

  def contained_people(people_list) when is_list(people_list) do
    people_list
    |> Enum.filter(fn i ->
      is_list(Map.get(i, :belongs_to_subgraph)) and
        length(Map.get(i, :belongs_to_subgraph)) > 0
    end)
  end

  def people_contained_by(people_list, container_id)
      when is_list(people_list) and is_integer(container_id) do
    people_list
    |> Enum.filter(fn i ->
      Enum.member?(Map.get(i, :belongs_to_subgraph), container_id)
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.People, <<70, 79, 82, 49, 0, 0, 16, ...>>, {:people_contained_by, 2}}
```

## Define and read groupings

As was done with children, we define a structure for groupings (subgraphs), strictly specifying an `id`, the grouping's unique identifier, the label for the group (`title`), a list of groupings belonging to this group—`children`, referring to _child_ subgroups, not teenagers—and a list of actual children (`people`).

Please note that in the source code, we use more commonly used technical terminology, which can conflict with actual user-facing naming.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Subgraph do
  defstruct id: 0, title: "", children: [], people: []
end
```

<!-- livebook:{"output":true} -->

```
{:module, Subgraph, <<70, 79, 82, 49, 0, 0, 8, ...>>,
 %Subgraph{id: 0, title: "", children: [], people: []}}
```

A dedicated module, `Graphing.SubgraphReader`, parses data from the spreadsheet's _Groupings_ worksheet, in order to get a list of top-level groupings (`top_level_subgraphs/1`), all non top-level groupings (`child_subgraphs/`), and a list of nested groups, fiven a parent grouping `id` (`subgraphs/2`).

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.SubgraphReader do
  def top_level_subgraphs(subgraph_list) when is_list(subgraph_list) do
    subgraph_list |> Enum.filter(fn [_id, _title, contained_by] -> contained_by == 0 end)
  end

  def child_subgraphs(subgraph_list) when is_list(subgraph_list) do
    subgraph_list |> Enum.filter(fn [_id, _title, contained_by] -> contained_by > 0 end)
  end

  def subgraphs(subgraph_list, id) when is_list(subgraph_list) and is_integer(id) do
    subgraph_list |> Enum.filter(fn [_id, _title, contained_by] -> contained_by == id end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.SubgraphReader, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:subgraphs, 2}}
```

Then, the `Graphing.Subgraphs.Tree` module performs the actual parsing and building up of a list of strict subgraphs (`construct_subgraph_tree/2`). As groupings can be nested, the returned result will be a grouping _tree_, using the above-defined functions to iterate on each grouping from the top-level down to the last _leaf nodes_.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.Subgraphs.Tree do
  def construct_subgraph_tree(subgraph_list, people_list \\ [])
      when is_list(subgraph_list) and is_list(people_list) do
    do_construct_subgraph_tree(subgraph_list, subgraph_list, people_list, [], 0)
  end

  defp do_construct_subgraph_tree(_full_subgraph_list, [], _people_list, acc, _parent_id), do: acc

  defp do_construct_subgraph_tree(
         full_subgraph_list,
         [[id, title, contained_by] | tail],
         people_list,
         acc,
         parent_id
       )
       when contained_by == parent_id do
    do_construct_subgraph_tree(
      full_subgraph_list,
      tail,
      people_list,
      [
        %Subgraph{
          id: id,
          title: title,
          children:
            do_construct_subgraph_tree(
              full_subgraph_list,
              Graphing.SubgraphReader.subgraphs(full_subgraph_list, id),
              people_list,
              [],
              id
            ),
          people: Graphing.People.people_contained_by(people_list, id)
        }
        | acc
      ],
      parent_id
    )
  end

  defp do_construct_subgraph_tree(
         full_subgraph_list,
         [[_id, _title, _contained_by] | tail],
         people_list,
         acc,
         parent_id
       ) do
    do_construct_subgraph_tree(full_subgraph_list, tail, people_list, acc, parent_id)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.Subgraphs.Tree, <<70, 79, 82, 49, 0, 0, 10, ...>>,
 {:do_construct_subgraph_tree, 5}}
```

## Define and read relationships

As with the previous two entities, we will define a structure for relationships, with fields for source and destination IDs (`source_id` and `destination_id`), source and destination link types (`source_link` and `destination_link`), and the description of the relationship (`description`).

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Relationship do
  defstruct source_id: 0,
            source_link: :open_link,
            destination_id: 0,
            destination_link: :open_link,
            description: ""
end
```

<!-- livebook:{"output":true} -->

```
{:module, Relationship, <<70, 79, 82, 49, 0, 0, 9, ...>>,
 %Relationship{
   source_id: 0,
   source_link: :open_link,
   destination_id: 0,
   destination_link: :open_link,
   description: ""
 }}
```

The following module, `Graphing.Relationships`, reads relationship definitions, parsing from plain text to structured identifiers, such as atoms for different link types. The parsing is carried out in the `construct_relationship_tree/1` function, returning a list of relationship structures.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.Relationships do
  def construct_relationship_tree(relationship_list) when is_list(relationship_list) do
    do_construct_relationship_tree(relationship_list, [])
  end

  defp do_construct_relationship_tree([], acc), do: acc

  defp do_construct_relationship_tree(
         [[source_id, destination_id, source_link, destination_link, description] | tail],
         acc
       ) do
    source_link =
      case source_link do
        "Open (no arrow)" -> :open_link
        "Arrow" -> :arrow
        "Dotted" -> :dotted
        "Dotted arrow" -> :dotted_arrow
        "Thick" -> :thick
        "Thick arrow" -> :thick_arrow
        "Circular node at end" -> :circular_terminator
        "X at end" -> :x_terminator
        _ -> :open_link
      end

    destination_link =
      case destination_link do
        "Open (no arrow)" -> :open_link
        "Arrow" -> :arrow
        "Dotted" -> :dotted
        "Dotted arrow" -> :dotted_arrow
        "Thick" -> :thick
        "Thick arrow" -> :thick_arrow
        "Circular node at end" -> :circular_terminator
        "X at end" -> :x_terminator
        _ -> :open_link
      end

    do_construct_relationship_tree(tail, [
      %Relationship{
        source_id: source_id,
        destination_id: destination_id,
        source_link: source_link,
        destination_link: destination_link,
        description: description
      }
      | acc
    ])
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.Relationships, <<70, 79, 82, 49, 0, 0, 12, ...>>,
 {:do_construct_relationship_tree, 2}}
```

## Build up a tree of all parsed data

With functionality in place to parse all three types of data, _People_, _Groupings_, and _Relationships_, we will construct a unified data tree representing all the parsed information. The data must be represented as a tree, as there is the possibility of nesting, where children can be placed in groups, and there any number of subgroups may be defined in the spreadsheet.

The `Graphing.DataTree` module does this for us, relying on all the functions defined so far. The function `construct_graph_tree/1` returns a _map_ structure, with three top-level key values: `people`, `subgraphs` and `relationships`.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.DataTree do
  def construct_graph_tree(data_payload) when is_list(data_payload) do
    [
      {"People", [_people_headers | people_list]},
      {"Groupings", [_grouping_headers | groupings_list]},
      {"Relationships", [_relationship_headers | relationships_list]} | _
    ] = data_payload

    people_tree = Graphing.People.parse_people(people_list)

    %{
      people: people_tree,
      subgraphs:
        Graphing.Subgraphs.Tree.construct_subgraph_tree(
          groupings_list,
          people_tree
        ),
      relationships: Graphing.Relationships.construct_relationship_tree(relationships_list)
    }
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.DataTree, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:construct_graph_tree, 1}}
```

## Parse the data tree, generating a Mermaid flowchart

`Graphing.Mermaid` is the module which reads the well-defined Elixir data tree, converting it to Mermaid's own, text-based graph definition.

This is a larger module, effectively building the definition using the `generate_mermaid_from_tree/1` function, which takes the parsed data tree, returning the chart-defining text. Internally, the function relies on a few functions:

1. `generate_mermaid_chart_preamble/0` to define the header, specifying defaults and the graph definition header
2. `generate_mermaid_from_people/1` to read and create entity-defining entries, those of the children in the graph
3. `generate_mermaid_from_subgraphs/1` to create subgraph definitions, using children, the above defined-entities in its layout
4. `generate_mermaid_from_relationships/1` to define relationships between the above entities and subgraphs

<!-- livebook:{"break_markdown":true} -->

In this module the carefully-parsed relationships, saved in the data tree as _atoms_ will now be converted to the expected dash and dot notation, needed for the desired relationship formatting. Also, the data tree itself, carefully constructed, will be flattened into a text structure. As Mermaid expects subgraph definitions to be delimited with an `end` identifier, the tree structure was needed to make this possible.

Please note that, beyond relationship link types, no styling decisions are defined in the Mermaid chart, as the design of this system assumes that the Mermaid-generated chart will be used for a visual check only, and that the entire diagram will be extensively styled in Draw.io later.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Graphing.Mermaid do
  def generate_mermaid_from_tree(data_tree) when is_map(data_tree) do
    [
      Graphing.Mermaid.generate_mermaid_chart_preamble(),
      Graphing.Mermaid.generate_mermaid_from_people(data_tree.people),
      Graphing.Mermaid.generate_mermaid_from_subgraphs(data_tree.subgraphs),
      Graphing.Mermaid.generate_mermaid_from_relationships(data_tree.relationships)
    ]
    |> Enum.join(";")
  end

  def generate_mermaid_chart_preamble(direction \\ "TD") do
    "flowchart #{direction}"
  end

  def generate_mermaid_from_people(people_list) when is_list(people_list) do
    for person <- people_list do
      %Person{id: id, name: name, dob: dob} = person
      "#{to_string(id)}([\"`#{name}<br>#{Calendar.strftime(dob, "%d/%m/%Y")}`\"])"
    end
    |> Enum.join(";")
  end

  defp relationship_source_link(source_link) when is_atom(source_link) do
    case source_link do
      :arrow -> "<--"
      _ -> "--"
    end
  end

  defp relationship_destination_link(destination_link) when is_atom(destination_link) do
    case destination_link do
      :arrow -> "-->"
      _ -> "---"
    end
  end

  def generate_mermaid_from_relationships(relationship_list) when is_list(relationship_list) do
    for relationship <- relationship_list do
      %Relationship{
        source_id: source_id,
        source_link: source_link,
        destination_id: destination_id,
        destination_link: destination_link,
        description: description
      } = relationship

      case description do
        "" ->
          "#{source_id} #{relationship_destination_link(destination_link)} #{destination_id}"

        _ ->
          "#{source_id}#{relationship_source_link(source_link)} \"`#{description}`\" #{relationship_destination_link(destination_link)}#{destination_id}"
      end
    end
    |> Enum.join(";")
  end

  def generate_mermaid_from_subgraphs(subgraph_list) when is_list(subgraph_list) do
    do_mermaid_from_subgraph(subgraph_list, [])
    |> do_flatten_mermaid_subgraph
    |> do_filter_mermaid_subgraph
    |> do_join_mermaid_subgraph
  end

  defp do_flatten_mermaid_subgraph(""), do: nil

  defp do_flatten_mermaid_subgraph(subgraph_list) when is_list(subgraph_list) do
    List.flatten(subgraph_list)
  end

  defp do_filter_mermaid_subgraph(subgraph_list) when is_nil(subgraph_list), do: nil

  defp do_filter_mermaid_subgraph(subgraph_list) when is_list(subgraph_list) do
    Enum.filter(subgraph_list, fn i -> i != "" end)
  end

  defp do_join_mermaid_subgraph(subgraph_list) when is_nil(subgraph_list), do: nil

  defp do_join_mermaid_subgraph(subgraph_list) when is_list(subgraph_list) do
    Enum.join(subgraph_list, " ")
  end

  def do_mermaid_from_subgraph([], []), do: ""
  def do_mermaid_from_subgraph([], acc), do: acc

  def do_mermaid_from_subgraph(
        [
          %Subgraph{
            id: id,
            title: title,
            children: children_list,
            people: people_list
          }
          | tail
        ],
        acc
      ) do
    do_mermaid_from_subgraph(tail, [
      "subgraph #{id} [\"`#{title}`\"];",
      Graphing.Mermaid.do_mermaid_from_subgraph(children_list, []),
      Graphing.Mermaid.generate_mermaid_subgraph_people(people_list),
      "end " | acc
    ])
  end

  def generate_mermaid_subgraph_people(people_list) when is_list(people_list) do
    people_mermaid =
      for person <- people_list do
        %Person{id: id} = person
        "#{to_string(id)}"
      end
      |> Enum.join(";")

    case people_mermaid do
      "" -> ""
      _ -> people_mermaid <> ";"
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Graphing.Mermaid, <<70, 79, 82, 49, 0, 0, 29, ...>>,
 {:generate_mermaid_subgraph_people, 1}}
```

## The user interface

As this Livebook will be deployed (locally) as a web application, we will lean on the `Kino` library to help with a simple user interface. The only interaction we need to expose is the source spreadsheet file picker, the results of which we save in the `input_spreadsheet` variable.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_spreadsheet = Kino.Input.file("Please select your input spreadsheet")
```

We will read that variable, saving its results in the `value` variable, to be used by the `XlsxReader` library.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
value = Kino.Input.read(input_spreadsheet)
```

<!-- livebook:{"output":true} -->

```
nil
```

We present a simple set of instructions to our end users, informing them how to select the input file, and generate the diagram and definition code.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Kino.Markdown.new("""
### Instructions for use

1. Select your file above
1. Click the '_play_' button that appears in the bottom right-hand corner to generate the diagram
1. Immediately below these instructions, you will quickly see a draft diagram drawn; check all information is presented and correct
1. Underneath the diagram, you will see the chart code. Copy this code in its entirety, this will generate your diagram
""")
```

## Mermaid graph generator

At last, with all the pieces in place, and the file selected by the user, we finally run all the steps to generate the Mermaid graph as well as its definition code, needed for import into Draw.io.

The next step opens the selected spreadsheet (file), reads in all the worksheets, constructs the internal data tree, finally generating the mermaid graph definition from that tree, saving it into the `mermaid_graph` variable.

```elixir
mermaid_graph =
  case value do
    nil ->
      nil

    _ ->
      Kino.Input.file_path(value.file_ref)
      |> Graphing.Spreadsheet.open_spreadsheet_file()
      |> Graphing.Spreadsheet.read_all_worksheets()
      |> Graphing.DataTree.construct_graph_tree()
      |> Graphing.Mermaid.generate_mermaid_from_tree()
  end
```

<!-- livebook:{"output":true} -->

```
nil
```

With the graph code generated, we pass it to `Kino` to generate and render the actual graph. Once the library generates the SVG, it will display it here, for user inspection.

```elixir
case mermaid_graph do
  nil -> nil
  _ -> Kino.Mermaid.new(mermaid_graph)
end
```

<!-- livebook:{"output":true} -->

```
nil
```

As we have the generated code in the `mermaid_graph` variable, we use it once again, this time to display the code defining the graph.

Once all the data is presented in the graph above, and the user is ready to start on laying out and styling the graph, they need to copy this entire code block—presented by `Kino` as a markdown block—importing it into Draw.io.

This was the entirety of the user's interaction with this web application, and the rest of their work will be carried out in Draw.io (or other diagramming software), where they will polish the diagram to a level where it communicates the relevant information to all the involved stakeholders.

```elixir
Kino.Markdown.new(mermaid_graph)
```
